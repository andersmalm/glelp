#ifndef _GLELP_GLCOREARB_H_
#define _GLELP_GLCOREARB_H_

#include "glcorearb.h"

namespace glelp
{
	bool init_1_0();
	bool init_1_1();
	bool init_1_2();
	bool init_1_3();
	bool init_1_4();
	bool init_1_5();
	bool init_2_0();
	bool init_2_1();
	bool init_3_0();
	bool init_3_1();
	bool init_3_2();
	bool init_3_3();
	bool init_4_0();
	bool init_4_1();
	bool init_4_2();
	bool init_4_3();
	bool init_4_4();
	bool init_GL_ARB_ES2_compatibility();
	bool init_GL_ARB_ES3_compatibility();
	bool init_GL_ARB_arrays_of_arrays();
	bool init_GL_ARB_base_instance();
	bool init_GL_ARB_bindless_texture();
	bool init_GL_ARB_blend_func_extended();
	bool init_GL_ARB_buffer_storage();
	bool init_GL_ARB_cl_event();
	bool init_GL_ARB_clear_buffer_object();
	bool init_GL_ARB_clear_texture();
	bool init_GL_ARB_compressed_texture_pixel_storage();
	bool init_GL_ARB_compute_shader();
	bool init_GL_ARB_compute_variable_group_size();
	bool init_GL_ARB_conservative_depth();
	bool init_GL_ARB_copy_buffer();
	bool init_GL_ARB_copy_image();
	bool init_GL_ARB_debug_output();
	bool init_GL_ARB_depth_buffer_float();
	bool init_GL_ARB_depth_clamp();
	bool init_GL_ARB_draw_buffers_blend();
	bool init_GL_ARB_draw_elements_base_vertex();
	bool init_GL_ARB_draw_indirect();
	bool init_GL_ARB_enhanced_layouts();
	bool init_GL_ARB_explicit_attrib_location();
	bool init_GL_ARB_explicit_uniform_location();
	bool init_GL_ARB_fragment_coord_conventions();
	bool init_GL_ARB_fragment_layer_viewport();
	bool init_GL_ARB_framebuffer_no_attachments();
	bool init_GL_ARB_framebuffer_object();
	bool init_GL_ARB_framebuffer_sRGB();
	bool init_GL_ARB_get_program_binary();
	bool init_GL_ARB_gpu_shader5();
	bool init_GL_ARB_gpu_shader_fp64();
	bool init_GL_ARB_half_float_vertex();
	bool init_GL_ARB_imaging();
	bool init_GL_ARB_indirect_parameters();
	bool init_GL_ARB_internalformat_query();
	bool init_GL_ARB_internalformat_query2();
	bool init_GL_ARB_invalidate_subdata();
	bool init_GL_ARB_map_buffer_alignment();
	bool init_GL_ARB_map_buffer_range();
	bool init_GL_ARB_multi_bind();
	bool init_GL_ARB_multi_draw_indirect();
	bool init_GL_ARB_occlusion_query2();
	bool init_GL_ARB_program_interface_query();
	bool init_GL_ARB_provoking_vertex();
	bool init_GL_ARB_query_buffer_object();
	bool init_GL_ARB_robust_buffer_access_behavior();
	bool init_GL_ARB_robustness();
	bool init_GL_ARB_robustness_isolation();
	bool init_GL_ARB_sample_shading();
	bool init_GL_ARB_sampler_objects();
	bool init_GL_ARB_seamless_cube_map();
	bool init_GL_ARB_seamless_cubemap_per_texture();
	bool init_GL_ARB_separate_shader_objects();
	bool init_GL_ARB_shader_atomic_counters();
	bool init_GL_ARB_shader_bit_encoding();
	bool init_GL_ARB_shader_draw_parameters();
	bool init_GL_ARB_shader_group_vote();
	bool init_GL_ARB_shader_image_load_store();
	bool init_GL_ARB_shader_image_size();
	bool init_GL_ARB_shader_precision();
	bool init_GL_ARB_shader_stencil_export();
	bool init_GL_ARB_shader_storage_buffer_object();
	bool init_GL_ARB_shader_subroutine();
	bool init_GL_ARB_shading_language_420pack();
	bool init_GL_ARB_shading_language_include();
	bool init_GL_ARB_shading_language_packing();
	bool init_GL_ARB_sparse_texture();
	bool init_GL_ARB_stencil_texturing();
	bool init_GL_ARB_sync();
	bool init_GL_ARB_tessellation_shader();
	bool init_GL_ARB_texture_buffer_object_rgb32();
	bool init_GL_ARB_texture_buffer_range();
	bool init_GL_ARB_texture_compression_bptc();
	bool init_GL_ARB_texture_compression_rgtc();
	bool init_GL_ARB_texture_cube_map_array();
	bool init_GL_ARB_texture_gather();
	bool init_GL_ARB_texture_mirror_clamp_to_edge();
	bool init_GL_ARB_texture_multisample();
	bool init_GL_ARB_texture_query_levels();
	bool init_GL_ARB_texture_query_lod();
	bool init_GL_ARB_texture_rg();
	bool init_GL_ARB_texture_rgb10_a2ui();
	bool init_GL_ARB_texture_stencil8();
	bool init_GL_ARB_texture_storage();
	bool init_GL_ARB_texture_storage_multisample();
	bool init_GL_ARB_texture_swizzle();
	bool init_GL_ARB_texture_view();
	bool init_GL_ARB_timer_query();
	bool init_GL_ARB_transform_feedback2();
	bool init_GL_ARB_transform_feedback3();
	bool init_GL_ARB_transform_feedback_instanced();
	bool init_GL_ARB_uniform_buffer_object();
	bool init_GL_ARB_vertex_array_bgra();
	bool init_GL_ARB_vertex_array_object();
	bool init_GL_ARB_vertex_attrib_64bit();
	bool init_GL_ARB_vertex_attrib_binding();
	bool init_GL_ARB_vertex_type_10f_11f_11f_rev();
	bool init_GL_ARB_vertex_type_2_10_10_10_rev();
	bool init_GL_ARB_viewport_array();
	bool init_GL_KHR_debug();
	bool init_GL_KHR_texture_compression_astc_hdr();
	bool init_GL_KHR_texture_compression_astc_ldr();

}


#endif // _GLELP_GLCOREARB_H_
